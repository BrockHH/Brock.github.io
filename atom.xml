<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星仔学习日记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-07-31T03:59:18.297Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>星仔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>3-1问题A：剩下的树</title>
    <link href="http://yoursite.com/2020/07/29/3-1%E9%97%AE%E9%A2%98A%EF%BC%9A%E5%89%A9%E4%B8%8B%E7%9A%84%E6%A0%91/"/>
    <id>http://yoursite.com/2020/07/29/3-1%E9%97%AE%E9%A2%98A%EF%BC%9A%E5%89%A9%E4%B8%8B%E7%9A%84%E6%A0%91/</id>
    <published>2020-07-29T12:10:33.000Z</published>
    <updated>2020-07-31T03:59:18.297Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题-A-剩下的树"><a href="#问题-A-剩下的树" class="headerlink" title="问题 A: 剩下的树"></a>问题 A: 剩下的树</h3><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>有一个长度为整数L(1&lt;=L&lt;=10000)的马路，可以想象成数轴上长度为L的一个线段，起点是坐标原点，在每个整数坐标点有一棵树，即在0,1,2，…，L共L+1个位置上有L+1棵树。<br>  现在要移走一些树，移走的树的区间用一对数字表示，如 100 200表示移走从100到200之间（包括端点）所有的树。<br>  可能有M(1&lt;=M&lt;=100)个区间，区间之间可能有重叠。现在要求移走所有区间的树之后剩下的树的个数。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>两个整数L(1&lt;=L&lt;=10000)和M(1&lt;=M&lt;=100)。<br>  接下来有M组整数，每组有一对数字。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p> 可能有多组输入数据，对于每组输入数据，输出一个数，表示移走所有区间的树之后剩下的树的个数。</p><h4 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4 2</span><br><span class="line">1 2</span><br><span class="line">0 2</span><br><span class="line">11 2</span><br><span class="line">1 5</span><br><span class="line">4 7</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure><h4 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h4 id="思路解析："><a href="#思路解析：" class="headerlink" title="思路解析："></a>思路解析：</h4><ol><li>用Line[L]数组表示：长度为L的马路总共有L+1颗树；</li><li>定义exist和without来表示有树为1和移除为0；</li><li>读取马路长L和移除区间个数M；</li><li>读取移除区间，从首到末进行移除，移除赋值为without，循环M次；</li><li>定义count计数剩余的树；</li><li>遍历数组line[L]，为exist表示剩余的树；</li><li>输出count;</li></ol><h4 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> exist 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> without 0 </span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l,m;</span><br><span class="line"><span class="keyword">int</span> line[<span class="number">10001</span>];<span class="comment">//表示L+1颗树 </span></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;l,&amp;m),l||m)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l+<span class="number">1</span>;i++)&#123;</span><br><span class="line">line[i]=exist;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> min,max;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;min,&amp;max);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=min;i&lt;max+<span class="number">1</span>;i++)&#123;</span><br><span class="line">line[i]=without;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">0</span>;<span class="comment">//计数剩余的数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(line[i]==exist)&#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,count);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;问题-A-剩下的树&quot;&gt;&lt;a href=&quot;#问题-A-剩下的树&quot; class=&quot;headerlink&quot; title=&quot;问题 A: 剩下的树&quot;&gt;&lt;/a&gt;问题 A: 剩下的树&lt;/h3&gt;&lt;h4 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;header
      
    
    </summary>
    
    
      <category term="Codeup" scheme="http://yoursite.com/categories/Codeup/"/>
    
    
      <category term="算法笔记-入门模拟" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0-%E5%85%A5%E9%97%A8%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="入门模拟-简单模拟" scheme="http://yoursite.com/tags/%E5%85%A5%E9%97%A8%E6%A8%A1%E6%8B%9F-%E7%AE%80%E5%8D%95%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="算法笔记学习日记" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
</feed>
